"""This test contains a full run of the ABX pipeline with randomly created
database and features
"""
# -*- coding: utf-8 -*-

import os.path

import ABXpy.task
import ABXpy.distances.distances as distances
import ABXpy.distances.metrics.cosine as cosine
import ABXpy.distances.metrics.dtw as dtw
import ABXpy.score as score
import ABXpy.misc.generate_data as generate
import ABXpy.analyze as analyze


def dtw_cosine_distance(x, y):
    """Return the DTW cosine distance between x and y.
    """
    return dtw.dtw(x, y, cosine.cosine_distance)

def prepare_working_dir(working_dir = './data'):
    """Setup path and filenames for the fullrun.

    Parameters
    ----------

    working_dir : str, optional
        The directory to write on.

    Return
    ------

    A dictionary containing relative path for each file that will be
    generated by the fullrun pipeline.
    """
    # TODO make it error safe
    
    # Create the working directory if needed.
    if not os.path.exists(working_dir):
        os.makedirs(working_dir)

    # Declare filenames for input/output data
    files = dict()
    files['item'] = 'data.item'
    files['feature'] = 'data.feature'
    files['distance'] = 'data.distance'
    files['score'] = 'data.score'
    files['task'] = 'data.abx'
    files['analyze'] = 'data.csv'

    # Prepend working directory to filenames
    files = dict((k, os.path.join(working_dir,v)) for (k,v) in files.iteritems())

    # Remove existing files in data directory
    for f in files.values():
        if os.path.isfile(f): os.remove(f)

    return files


def fullrun(working_dir = 'data'):
    """Run a full ABX run on artificial data.

    Generate a set a artificial data and run the ABX pipeline on it.
    """

    files = prepare_working_dir(working_dir)
    
    # Generate artificial items and features
    # 3 labels c0, c1 and c2 are created
    generate.item_and_feature(2, 3, 1, files['item'], 2, 2, files['feature'])

    # ABX pipeline
    task = ABXpy.task.Task(files['item'], 'c0', 'c1', 'c2')
    task.generate_triplets()
    
    # distances.compute_distances(files['feature'], '/features/', files['task'],
    #                             files['distance'], dtw_cosine_distance)
    
    # score.score(files['task'], files['distance'], files['score'])
    
    #analyze.analyze(files['score'], files['task'], files['analyze'])
    return items

    

fullrun()
